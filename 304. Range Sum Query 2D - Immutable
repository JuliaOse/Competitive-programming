class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        self.matrix = matrix 
        self.prefix = [[0 for _ in range(len(self.matrix[0])+1)] for _ in range(len(self.matrix)+1)]

        for i in range(1,len(self.matrix)+1):
            for j in range(1,len(self.matrix[0])+1):
                self.prefix[i][j] = self.prefix[i][j-1] + self.prefix[i-1][j] - self.prefix[i-1][j-1] + self.matrix[i-1][j-1]

    
    
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        # sum_ = self.prefix[row2][col2]
        # print(sum_)
        # if col1-1 >= 0 and row1-1>=0:
        #     return sum_ + self.prefix[row1-1][col1-1] - self.prefix[row1-1][col2] - self.prefix[row2][col1-1]
        # if row1 -1 >= 0:
        #     return sum_ - self.prefix[row1-1][col2]
        # if col1 -1 >= 0:
        #     return sum_ - self.prefix[row2][col1-1]
        # return self.matrix[0][0]
        


        return self.prefix[row2+1][col2+1] + self.prefix[row1][col1] - self.prefix[row1][col2+1] - self.prefix[row2+1][col1]
        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
